digraph "classes_conformacophore" {
rankdir=BT
charset="utf-8"
"src.conformacophore.metrics.cluster_metrics.ClusterMetrics" [color="black", fontcolor="black", label=<{ClusterMetrics|<br ALIGN="LEFT"/>|<I>calculate_metrics</I>(rmsd_matrix: np.ndarray, clusters: List[int]): dict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.metrics.cluster_statistics.ClusterStatistics" [color="black", fontcolor="black", label=<{ClusterStatistics|<br ALIGN="LEFT"/>|calculate_metrics(rmsd_matrix: np.ndarray, clusters: List[int]): dict<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.visualizers.cluster_visualizer.ClusterVisualizer" [color="black", fontcolor="black", label=<{ClusterVisualizer|COLOR_LIST : list<br ALIGN="LEFT"/>|create_visualizations(rmsd_matrix, clusters, linkage, compound_id, output_dir, metrics, optimal_clusters)<br ALIGN="LEFT"/>get_cmap(num_clusters)<br ALIGN="LEFT"/>plot_2d_projection(rmsd_matrix, clusters, colors, output_dir, compound_id, dpi)<br ALIGN="LEFT"/>plot_cluster_sizes(clusters, colors, output_dir, compound_id, dpi)<br ALIGN="LEFT"/>plot_dendrogram(linkage, clusters, output_dir, compound_id, dpi)<br ALIGN="LEFT"/>plot_distance_matrix(rmsd_matrix, output_dir, compound_id, dpi)<br ALIGN="LEFT"/>plot_linear_projection(clusters, frames, colors, output_dir, compound_id, dpi)<br ALIGN="LEFT"/>plot_optimal_cluster_metrics(metrics: dict, output_dir: str, compound_id: str, optimal_clusters: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.contexts.clustering_context.ClusteringContext" [color="black", fontcolor="black", label=<{ClusteringContext|<br ALIGN="LEFT"/>|calculate_rmsd_matrix(structures: List[np.ndarray]): np.ndarray<br ALIGN="LEFT"/>cluster(data: np.ndarray): List[int]<br ALIGN="LEFT"/>set_strategy(strategy: ClusteringStrategy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.handlers.clustering_handler.ClusteringHandler" [color="black", fontcolor="black", label=<{ClusteringHandler|context<br ALIGN="LEFT"/>optimal_cluster_count<br ALIGN="LEFT"/>representative_finder<br ALIGN="LEFT"/>|calculate_rmsd_matrix(trajs): np.ndarray<br ALIGN="LEFT"/>find_lowest_rmsd_structure(pdb_files: List[str], rmsd_matrix: np.ndarray, clusters: List[int]): tuple<br ALIGN="LEFT"/>get_clusters(linkage_matrix: np.ndarray, n_clusters: int): List[int]<br ALIGN="LEFT"/>get_optimal_clusters(rmsd_matrix: np.ndarray, max_clusters: int, output_dir: str, compound_id: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.strategies.clustering_strategy.ClusteringStrategy" [color="black", fontcolor="black", label=<{ClusteringStrategy|<br ALIGN="LEFT"/>|<I>cluster</I>(data: np.ndarray): List[int]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.io.pdb_writer.CustomPDBIO" [color="black", fontcolor="black", label=<{CustomPDBIO|header_handler<br ALIGN="LEFT"/>|save(file, select, write_end: bool, preserve_atom_numbering: bool)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.io.enhanced_pdb_io.EnhancedPDBIO" [color="black", fontcolor="black", label=<{EnhancedPDBIO|header_handler<br ALIGN="LEFT"/>|save(structure: Structure, filepath: str, model_num: Optional[int])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.visualizers.graph_visualizer.GraphVisualizer" [color="black", fontcolor="black", label=<{GraphVisualizer|graph : Graph<br ALIGN="LEFT"/>|draw_graph(with_labels, node_size, edge_color, font_size)<br ALIGN="LEFT"/>draw_graph_3d()<br ALIGN="LEFT"/>draw_graph_with_attributes()<br ALIGN="LEFT"/>get_cpk_color(element: str): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.clustering.kmeans_clustering.KMeansClustering" [color="black", fontcolor="black", label=<{KMeansClustering|n_clusters : int<br ALIGN="LEFT"/>|cluster(data: np.ndarray): List[int]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.entities.molecular_graph.MolecularGraph" [color="black", fontcolor="black", label=<{MolecularGraph|atoms : List[Any]<br ALIGN="LEFT"/>graph : Graph<br ALIGN="LEFT"/>|from_pdb_file(pdb_file: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.metrics.optimal_cluster_count.OptimalClusterCount" [color="black", fontcolor="black", label=<{OptimalClusterCount|<br ALIGN="LEFT"/>|calculate_metrics(rmsd_matrix: np.ndarray, Z: np.ndarray): dict<br ALIGN="LEFT"/>get_optimal_clusters(rmsd_matrix: np.ndarray, max_clusters: int, output_dir: str, compound_id: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.handlers.pdb_handler.PDBHandler" [color="black", fontcolor="black", label=<{PDBHandler|header_handler<br ALIGN="LEFT"/>writer<br ALIGN="LEFT"/>|extract_chains(pdb_file: str, chain_letters: List[str]): Tuple[Structure, md.Trajectory]<br ALIGN="LEFT"/>get_structure_from_model(filepath: str, model_num: int): Structure<br ALIGN="LEFT"/>save_structure(structure: Structure, output_path: str, model_num: Optional[int])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.handlers.pdb_header_handler.PDBHeaderHandler" [color="black", fontcolor="black", label=<{PDBHeaderHandler|conect_records : List[str], list<br ALIGN="LEFT"/>global_headers : List[str], list<br ALIGN="LEFT"/>model_headers : Dict[int, List[str]], dict<br ALIGN="LEFT"/>model_metadata : Dict[int, Dict[str, List[str]]], dict<br ALIGN="LEFT"/>|read_headers(pdb_path: str)<br ALIGN="LEFT"/>write_model_information(file_handle, model_num: int)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.io.pdb_reader.PDBReader" [color="black", fontcolor="black", label=<{PDBReader|<br ALIGN="LEFT"/>|get_structure_from_model(filepath: str, model_num: int): Structure<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.pipeline.Pipeline" [color="black", fontcolor="black", label=<{Pipeline|clustering_handler<br ALIGN="LEFT"/>input_dir : str<br ALIGN="LEFT"/>ligand_chain : str<br ALIGN="LEFT"/>molecule_chain : str<br ALIGN="LEFT"/>output_dir : str<br ALIGN="LEFT"/>pdb_handler<br ALIGN="LEFT"/>summary_handler<br ALIGN="LEFT"/>target_chains : List[str]<br ALIGN="LEFT"/>visualization_handler<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.clustering.rmsd_clustering.RMSDClustering" [color="black", fontcolor="black", label=<{RMSDClustering|<br ALIGN="LEFT"/>|calculate_rmsd_matrix(structures: List[np.ndarray]): np.ndarray<br ALIGN="LEFT"/>cluster(data: np.ndarray): List[int]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.filters.representatives_finder.RepresentativeFinder" [color="black", fontcolor="black", label=<{RepresentativeFinder|<br ALIGN="LEFT"/>|find_lowest_rmsd_structure(pdb_files: List[str], rmsd_matrix: np.ndarray, clusters: List[int]): tuple<br ALIGN="LEFT"/>find_representative_structure(rmsd_matrix: np.ndarray, clusters: List[int], structures: List[Any]): List[Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.handlers.summary_handler.SummaryHandler" [color="black", fontcolor="black", label=<{SummaryHandler|summaries : list<br ALIGN="LEFT"/>|append_summary(summary)<br ALIGN="LEFT"/><I>create_compound_summary</I>(compound_id, metrics, suggestions, clusters, rmsd_matrix, cluster_info)<br ALIGN="LEFT"/>write_analysis_summary(output_dir: str)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.handlers.visualization_handler.VisualizationHandler" [color="black", fontcolor="black", label=<{VisualizationHandler|visualizer<br ALIGN="LEFT"/>|create_visualizations(rmsd_matrix, clusters, linkage_matrix, cutoff, compound_id, output_dir)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.conformacophore.clustering.kmeans_clustering.KMeansClustering" -> "src.conformacophore.strategies.clustering_strategy.ClusteringStrategy" [arrowhead="empty", arrowtail="none"];
"src.conformacophore.clustering.rmsd_clustering.RMSDClustering" -> "src.conformacophore.strategies.clustering_strategy.ClusteringStrategy" [arrowhead="empty", arrowtail="none"];
"src.conformacophore.metrics.cluster_statistics.ClusterStatistics" -> "src.conformacophore.metrics.cluster_metrics.ClusterMetrics" [arrowhead="empty", arrowtail="none"];
"src.conformacophore.contexts.clustering_context.ClusteringContext" -> "src.conformacophore.handlers.clustering_handler.ClusteringHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="context", style="solid"];
"src.conformacophore.filters.representatives_finder.RepresentativeFinder" -> "src.conformacophore.handlers.clustering_handler.ClusteringHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="representative_finder", style="solid"];
"src.conformacophore.handlers.clustering_handler.ClusteringHandler" -> "src.conformacophore.pipeline.Pipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="clustering_handler", style="solid"];
"src.conformacophore.handlers.pdb_handler.PDBHandler" -> "src.conformacophore.pipeline.Pipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pdb_handler", style="solid"];
"src.conformacophore.handlers.pdb_header_handler.PDBHeaderHandler" -> "src.conformacophore.handlers.pdb_handler.PDBHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_handler", style="solid"];
"src.conformacophore.handlers.pdb_header_handler.PDBHeaderHandler" -> "src.conformacophore.io.enhanced_pdb_io.EnhancedPDBIO" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="header_handler", style="solid"];
"src.conformacophore.handlers.summary_handler.SummaryHandler" -> "src.conformacophore.pipeline.Pipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="summary_handler", style="solid"];
"src.conformacophore.handlers.visualization_handler.VisualizationHandler" -> "src.conformacophore.pipeline.Pipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="visualization_handler", style="solid"];
"src.conformacophore.io.enhanced_pdb_io.EnhancedPDBIO" -> "src.conformacophore.handlers.pdb_handler.PDBHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="writer", style="solid"];
"src.conformacophore.metrics.optimal_cluster_count.OptimalClusterCount" -> "src.conformacophore.handlers.clustering_handler.ClusteringHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="optimal_cluster_count", style="solid"];
"src.conformacophore.visualizers.cluster_visualizer.ClusterVisualizer" -> "src.conformacophore.handlers.visualization_handler.VisualizationHandler" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="visualizer", style="solid"];
"src.conformacophore.strategies.clustering_strategy.ClusteringStrategy" -> "src.conformacophore.contexts.clustering_context.ClusteringContext" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_strategy", style="solid"];
}
